{"version":3,"sources":["logo.svg","assets/images/children.jpg","Component/Button/Button.js","Component/Footer/Footer.js","Component/Card/Card.js","Component/Home/Home.js","Component/About/About.js","Component/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","onClick","text","Footer","Card","src","require","Home","console","log","About","Map","ReactMapboxGl","accessToken","MapContainer","style","containerStyle","height","width","center","zoom","type","id","layout","coordinates","App","useState","isCollapsed","setIsCollapsed","navbarRef","useRef","setHeight","device","window","innerWidth","useEffect","current","scrollHeight","toggleActiveTab","e","to","ref","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27c468ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/children.672e8a1a.jpg\";","import React from 'react';\r\nimport './Button.css';\r\nfunction Button(props) {\r\n    return (\r\n        <button \r\n            className={props.className}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.text}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport './Footer.css';\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div className=\"footer\">\r\n            myHome &copy;2018\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <div className=\"card-title\">\r\n                \"\r\n                </div>\r\n                As you can see, weâ€™ve pulled off a really nice letterpress effect. \r\n                That blurry edge is being cropped and now creates the illusion of an inset shadow. \r\n            </div>\r\n            <div className=\"card-footer\">\r\n                <img src={require(\"../../assets/images/children.jpg\")} className=\"img img-circle\" />\r\n                <p className=\"text\">Harris Porter</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Home.css';\r\n\r\nimport Button from '../Button/Button';\r\nimport Footer from  '../Footer/Footer';\r\nimport Card from '../Card/Card';\r\n\r\nfunction Home (props) {\r\n    const clickHandler = () => {\r\n        console.log(\"Click\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-page\">\r\n            <div className=\"landing\">\r\n                <Button text=\"My Home\" onClick={clickHandler} className=\"btn custom-btn\"/>\r\n            </div>\r\n\r\n            <div className=\"section\">\r\n                <h5 className=\"title-text\">TESTIMONIAL</h5>\r\n               \r\n            </div>\r\n\r\n            <div className=\"section\">\r\n                <h5 className=\"title-text\">TESTIMONIAL</h5>\r\n                <div className=\"section_inner\">\r\n                    <Card />\r\n                    <Card />\r\n                    <Card />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"section\">\r\n                <h5 className=\"title-text\">CONTACT</h5>\r\n            </div>\r\n\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nfunction About(props) {\r\n    return (\r\n        <div>\r\n            About\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\r\n\r\n// access token\r\nconst Map = ReactMapboxGl({\r\n    accessToken:\r\n      'pk.eyJ1IjoiZGF1ZGk5NyIsImEiOiJjanJtY3B1bjYwZ3F2NGFvOXZ1a29iMmp6In0.9ZdvuGInodgDk7cv-KlujA'\r\n});\r\n\r\nfunction MapContainer(props) {\r\n    return (\r\n        <div>\r\n          <Map\r\n            style='mapbox://styles/mapbox/light-v10'\r\n            containerStyle={{\r\n                height: '91.3vh',\r\n                width: '100vw'\r\n            }}\r\n            center={[34.9321088,-0.6299662865]}\r\n            zoom={[10]}\r\n            >\r\n            <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'marker-15' }}>\r\n                <Feature coordinates={[-0.481747846041145, 51.3233379650232]} />\r\n            </Layer>\r\n            </Map>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapContainer;","import React, { useState, useRef, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Home from './Component/Home/Home';\nimport About from './Component/About/About';\nimport MapContainer from './Component/Map/Map';\n\nfunction App() {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const navbarRef = useRef(null);\n  const [height, setHeight] = useState(0);\n  const device = window.innerWidth;\n\n  useEffect(() =>{\n    if(device < 12) {\n      setIsCollapsed(true);\n    }\n\n    // update height\n   setHeight(navbarRef.current.scrollHeight);\n  }, []);\n\n  const toggleNavLinks = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  const toggleActiveTab = (e) => {\n    console.log(e);\n  }\n\n  return (\n    <Router>\n      <div className=\"nav\">\n        <nav className=\"navbar\">\n            <Link to=\"/\" className=\"navbar-brand\">myHome.</Link>\n            <div \n              className=\"navbar-toggler\" \n              onClick={toggleNavLinks}\n              >\n                <span></span>\n                <span></span>\n                <span></span>\n            </div>\n          <ul \n            ref={navbarRef}\n            className=\"navbar-nav\"\n            style={{\n              \"height\": isCollapsed ? \"0px\" : height +\"px\"\n            }}\n          >\n            <li  onClick={toggleActiveTab}>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li onClick={toggleActiveTab}>\n              <Link to=\"/map\">Map</Link>\n            </li>\n            <li onClick={toggleActiveTab}>\n              <Link to=\"/about\" >About</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* switch to map the path */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/map\">\n            <MapContainer />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}